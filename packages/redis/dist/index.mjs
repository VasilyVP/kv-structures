var h=Object.defineProperty;var r=(n,t)=>h(n,"name",{value:t,configurable:!0});import{randomBytes as o}from"crypto";import a from"json-bigint";import"redis";function c(){throw new Error("You should call init() before")}r(c,"getClient");class m{static{r(this,"RedisMap")}constructor(t,s){this.name=t,this.ttl=s,this.name=t||o(8).toString("hex"),this.ttl=s,this.redis=c()}redis;async set(t,s,e){await this.redis.set(`${this.name}:${t}`,a.stringify(s),{PX:e||this.ttl})}async get(t){const s=await this.redis.get(`${this.name}:${t}`);return s?a.parse(s):null}async has(t){return!!await this.redis.exists(`${this.name}:${t}`)}async delete(t){await this.redis.del(`${this.name}:${t}`)}async*keys(){let t=0;do{const{cursor:s,keys:e}=await this.redis.scan(t,{MATCH:`${this.name}:*`,COUNT:1e3});t=s,yield e.map(i=>i.replace(`${this.name}:`,""))}while(t!==0)}async size(){let t=0,s=0;do{const{cursor:e,keys:i}=await this.redis.scan(t,{MATCH:`${this.name}:*`,COUNT:1e3});s+=i.length,t=e}while(t!==0);return s}async clear(){for await(const t of this.keys()){const s=t.map(e=>`${this.name}:${e}`);await this.redis.del(s)}}async increment(t,s=1){return Number.isInteger(s)?await this.redis.incrBy(`${this.name}:${t}`,s):await this.redis.incrByFloat(`${this.name}:${t}`,s)}async decrement(t,s=1){return Number.isInteger(s)?await this.redis.decrBy(`${this.name}:${t}`,s):await this.redis.incrByFloat(`${this.name}:${t}`,-1*s)}}export{m as RedisMap};
